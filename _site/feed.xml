<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2023-07-31T20:21:26-07:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design.
</subtitle><entry><title type="html">Conda Tutorial</title><link href="http://localhost:4000/blog/2023/conda-tutorial/" rel="alternate" type="text/html" title="Conda Tutorial" /><published>2023-07-31T05:00:00-07:00</published><updated>2023-07-31T05:00:00-07:00</updated><id>http://localhost:4000/blog/2023/conda-tutorial</id><content type="html" xml:base="http://localhost:4000/blog/2023/conda-tutorial/"><![CDATA[<h4 id="python-version-management-tool--conda">Python version management tool – conda</h4>

<h4 id="references">References</h4>
<ul>
    <li><a href="https://sachinjose31.medium.com/creating-an-environment-in-anaconda-through-a-yml-file-7e5deeb7676d">Creating an environment in anaconda through a yml file</a>.</li>
</ul>]]></content><author><name></name></author><category term="note-posts" /><category term="notes" /><summary type="html"><![CDATA[references]]></summary></entry><entry><title type="html">PyPI your python package</title><link href="http://localhost:4000/blog/2023/PyPI-your-python-package/" rel="alternate" type="text/html" title="PyPI your python package" /><published>2023-07-31T05:00:00-07:00</published><updated>2023-07-31T05:00:00-07:00</updated><id>http://localhost:4000/blog/2023/PyPI%20your%20python%20package</id><content type="html" xml:base="http://localhost:4000/blog/2023/PyPI-your-python-package/"><![CDATA[<h4 id="pypi-your-own-python-packages">PyPI your own python packages</h4>

<p>Python Packaging Index (PyPI) is a repository containing several hundred thousand packages.</p>

<h4 id="references">References</h4>
<ul>
    <li><a href="https://realpython.com/pypi-publish-python-package/#configuring-your-package">How to Publish an Open-Source Python Package to PyPI</a>.</li>
    <li><a href="https://realpython.com/python-wheels/">What Are Python Wheels and Why Should You Care?</a></li>
</ul>]]></content><author><name></name></author><category term="note-posts" /><category term="notes" /><summary type="html"><![CDATA[tutorial]]></summary></entry><entry><title type="html">Triton server tutorial</title><link href="http://localhost:4000/blog/2023/tritonserver/" rel="alternate" type="text/html" title="Triton server tutorial" /><published>2023-07-21T10:49:00-07:00</published><updated>2023-07-21T10:49:00-07:00</updated><id>http://localhost:4000/blog/2023/tritonserver</id><content type="html" xml:base="http://localhost:4000/blog/2023/tritonserver/"><![CDATA[<p><a href="https://www.run.ai/guides/machine-learning-engineering/triton-inference-server">Triton Inference Server: The Basics and a Quick Tutorial</a></p>

<p>Github of <a href="https://github.com/triton-inference-server"> Triton inference server</a>.</p>

<h4 id="introduction">Introduction</h4>

<p>Specify triton model by providing model repository path:</p>

<figure class="highlight"><pre><code class="language-terminal" data-lang="terminal"><span class="gp">tritonserver --model-repository=&lt;repository-path&gt;</span></code></pre></figure>

<p>There can be multiple versions of each model, with each version stored in a numerically-named subdirectory. The subdirectory’s name must be the model’s version number and it should not be 0.</p>

<p>For example, an ONNX model directory structure looks like this:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;repository-path&gt;/
-&lt;model-name&gt;/
--config.pbtxt
--1/
---model.onnx
</code></pre></div></div>

<p>How Triton Client communicate with Triton?
Through GRPC or HTTP requests, to send inputs to Triton and receive outputs.
Examples could be found <a href="https://github.com/triton-inference-server/server/tree/main/docs/examples/model_repository">here</a>.</p>

<h4 id="install-and-run-triton">Install and Run Triton</h4>
<h5 id="install-triton-docker-image">Install Triton Docker Image</h5>

<figure class="highlight"><pre><code class="language-terminal" data-lang="terminal"><span class="gp">docker pull nvcr.io/nvidia/tritonserver:&lt;xx.yy&gt;</span><span class="nt">-py3</span> 
<span class="gp">#</span>&lt;xx.yy&gt; represents the version of Triton</code></pre></figure>

<h5 id="create-your-model-repository">Create Your Model Repository</h5>

<h5 id="run-triton">Run Triton</h5>

<figure class="highlight"><pre><code class="language-terminal" data-lang="terminal"><span class="gp">docker run --gpus=3 --rm -p8000:8000 -p8001:8001 -p8002:8002 -v/full/path/to/docs/examples/model_repository:/models nvcr.io/nvidia/tritonserver:&lt;xx.yy&gt;</span><span class="nt">-py3</span> tritonserver <span class="nt">--model-repository</span><span class="o">=</span>/models</code></pre></figure>]]></content><author><name></name></author><category term="note-posts" /><category term="notes" /><summary type="html"><![CDATA[Cheatsheet]]></summary></entry><entry><title type="html">What is Docker</title><link href="http://localhost:4000/blog/2023/docker/" rel="alternate" type="text/html" title="What is Docker" /><published>2023-07-21T03:21:00-07:00</published><updated>2023-07-21T03:21:00-07:00</updated><id>http://localhost:4000/blog/2023/docker</id><content type="html" xml:base="http://localhost:4000/blog/2023/docker/"><![CDATA[<p><a href="https://djangostars.com/blog/what-is-docker-and-how-to-use-it-with-python/">What is docker and how to use it</a></p>

<p><a href="https://kubernetes.io/docs/tutorials/kubernetes-basics/">Kubernetes</a></p>

<p>Data communication between dockers?</p>]]></content><author><name></name></author><category term="note-posts" /><category term="notes" /><summary type="html"><![CDATA[Docker tutorial]]></summary></entry><entry><title type="html">Linux Shell Scripting</title><link href="http://localhost:4000/blog/2023/shell-programming/" rel="alternate" type="text/html" title="Linux Shell Scripting" /><published>2023-06-20T06:43:00-07:00</published><updated>2023-06-20T06:43:00-07:00</updated><id>http://localhost:4000/blog/2023/shell-programming</id><content type="html" xml:base="http://localhost:4000/blog/2023/shell-programming/"><![CDATA[<p><a href="https://bash.cyberciti.biz/guide/Main_Page">Linux Bash Shell Scripting Tutorial</a></p>]]></content><author><name></name></author><category term="note-posts" /><category term="notes" /><category term="code" /><summary type="html"><![CDATA[Shell programming]]></summary></entry><entry><title type="html">Git Routine</title><link href="http://localhost:4000/blog/2023/git-routines/" rel="alternate" type="text/html" title="Git Routine" /><published>2023-06-20T03:00:00-07:00</published><updated>2023-06-20T03:00:00-07:00</updated><id>http://localhost:4000/blog/2023/git-routines</id><content type="html" xml:base="http://localhost:4000/blog/2023/git-routines/"><![CDATA[<h4 id="useful-git-commands">Useful git commands</h4>

<h5 id="command-cheatsheet">Command cheatsheet</h5>

<figure class="highlight"><pre><code class="language-terminal" data-lang="terminal"><span class="go">git status
git diff
</span><span class="gp">git diff &lt;filename&gt;</span><span class="w">
</span><span class="gp">git add --all #</span><span class="w"> </span>Stage all files
<span class="gp">git add &lt;filename&gt;</span><span class="w">	</span><span class="c"># Stage a file, ready to commit</span>
<span class="gp">git reset #</span><span class="w"> </span>Unstage all files
<span class="gp">git reset &lt;filename&gt;</span><span class="w"> </span><span class="c"># Unstage one file</span>
<span class="gp">git restore &lt;filename&gt;</span><span class="w"> </span><span class="c"># Discard changes of the file</span>
<span class="go">
git commit -m "Post update" 
</span><span class="gp">git push -u origin &lt;your-branch&gt;</span><span class="w"> </span></code></pre></figure>

<p><a href="#">Git Tools - Branch</a></p>

<figure class="highlight"><pre><code class="language-terminal" data-lang="terminal"><span class="gp">git checkout -b &lt;your-branch&gt;</span><span class="w"> </span><span class="c"># new local branch</span>
<span class="gp">git branch -d &lt;your-branch&gt;</span><span class="w">   </span><span class="c"># delete the branch</span></code></pre></figure>

<p><a href="https://git-scm.com/book/en/v2/Git-Tools-Interactive-Staging">Git Tools - Interactive staging</a></p>

<p>We can stage patches under interactive staging mode.</p>

<figure class="highlight"><pre><code class="language-terminal" data-lang="terminal"><span class="gp">git add -i #</span><span class="w"> </span>Interactive Staging
<span class="gp">git add -p #</span><span class="w"> </span>or <span class="nt">--patch</span> to start partial staging
<span class="go">git reset -p</span></code></pre></figure>

<p><a href="https://www.cloudbees.com/blog/git-undo-commit">Git Tools - Time Travel</a></p>

<p>Better undoing mistakes before commit:</p>

<figure class="highlight"><pre><code class="language-terminal" data-lang="terminal"><span class="go">git stash
</span><span class="gp">git checkout -- &lt;filename&gt;</span><span class="w"> </span><span class="c"># Discard file changes permanently</span>
<span class="gp">git reset --hard #</span><span class="w"> </span>Discard all changes permanently</code></pre></figure>

<p>Undo Committed changes:</p>

<figure class="highlight"><pre><code class="language-terminal" data-lang="terminal"><span class="gp">git reflog #</span><span class="w"> </span>To check the commit id.
<span class="gp">git reset --hard &lt;commit-id&gt;</span><span class="w"> </span><span class="c"># Discard all changes permanently</span>
<span class="go">
</span><span class="gp">git rm -rf --cached . #</span><span class="w"> </span>remove the cache
<span class="gp">git reset --hard HEAD #</span><span class="w"> </span>reset to the latest commit of the current branch</code></pre></figure>

<p>Undoing changes in a shared repo:</p>

<figure class="highlight"><pre><code class="language-terminal" data-lang="terminal"><span class="gp">git revert &lt;commit-id&gt;</span><span class="w"> </span><span class="c"># A new commit that reverts the changes of commit-id.</span></code></pre></figure>

<p><a href="https://git-scm.com/book/en/v2/Git-Tools-Submodules">Git Tools - Submodules</a></p>

<figure class="highlight"><pre><code class="language-terminal" data-lang="terminal"><span class="go">git clone --recurse-submodules -j8  target_git@github.com</span></code></pre></figure>

<p>If we cloned the repo without recursively pull submodules, try the following:</p>

<figure class="highlight"><pre><code class="language-terminal" data-lang="terminal"><span class="gp">cd &lt;repo-dir&gt;</span><span class="w">
</span><span class="go">git submodule update --init --recursive</span></code></pre></figure>

<p>To individually update a specific submodule:</p>

<figure class="highlight"><pre><code class="language-terminal" data-lang="terminal"><span class="gp">cd &lt;submodule-dir&gt;</span><span class="w">
</span><span class="go">git pull --recurse-submodules</span></code></pre></figure>

<p><a href="https://linuxhint.com/pull-git-submodules-after-cloning-project-from-github/">Submodule can be added</a> to your current repo by:</p>

<figure class="highlight"><pre><code class="language-terminal" data-lang="terminal"><span class="gp">cd &lt;repo-dir&gt;</span><span class="w">
</span><span class="gp">git submodule add &lt;git_url_to_the_submodule&gt;</span><span class="w"> </span>&lt;submodule_folder_name&gt;</code></pre></figure>

<p><a href="https://stackoverflow.com/questions/11168141/find-which-commit-is-currently-checked-out-in-git">Git Tools - commit information</a></p>

<p>variations:</p>

<figure class="highlight"><pre><code class="language-terminal" data-lang="terminal"><span class="go">git show [--outline -s]
git reflog 
</span><span class="gp">git log -1 [--outline] #</span><span class="w"> </span>show the last commit info
<span class="go">git status</span></code></pre></figure>

<p>Launch gitk graphic display:</p>

<figure class="highlight"><pre><code class="language-terminal" data-lang="terminal"><span class="go">git bisect visualize
</span><span class="gp">git bisect view  #</span><span class="w"> </span>shorter, means same thing</code></pre></figure>

<p><a href="https://www.codeblocq.com/2016/02/Stash-your-changes-before-switching-branch/">Git Tools - Stash</a>:</p>

<figure class="highlight"><pre><code class="language-terminal" data-lang="terminal"><span class="go">git stash save "changes on the current-branch"
</span><span class="gp">git stash pop #</span><span class="w"> </span>unstash the changes of the top stash
<span class="gp">git stash list #</span><span class="w"> </span>list the stash stack
<span class="gp">git stash pop "stash@{1}" #</span><span class="w"> </span>unstash a specific stash
<span class="gp">git stash apply #</span><span class="w"> </span>apply the top stash
<span class="gp">git stash drop #</span><span class="w"> </span>drop the top stash
<span class="gp">git stash show #</span><span class="w"> </span>Show the files <span class="k">in </span>the most recent stash
<span class="gp">git stash show -p #</span><span class="w"> </span>show the changes <span class="k">in </span>the most recent stash
<span class="gp">git stash show -p stash@{1} #</span><span class="w"> </span>show the changes of the specified stash
<span class="gp">git stash show -p 1 #</span><span class="w"> </span>simplified version of the above comment</code></pre></figure>

<p><a href="https://docs.github.com/en/get-started/getting-started-with-git/configuring-git-to-handle-line-endings?platform=linux">Git Tools - Eol configuration</a></p>

<p>Global settings for line endings:</p>

<figure class="highlight"><pre><code class="language-terminal" data-lang="terminal"><span class="go">git config --global core.autocrlf input
</span><span class="gp">#</span><span class="w"> </span>Configure Git to ensure line endings <span class="k">in </span>files you checkout are correct <span class="k">for </span>Linux
<span class="go">
</span><span class="gp">git config --get core.autocrlf #</span><span class="w"> </span>Check the value</code></pre></figure>

<p>Per-repository settings:</p>

<p>You can configure a <code class="language-plaintext highlighter-rouge">.gitattributes</code> file to manage how Git reads line endings in a specific repository. The <code class="language-plaintext highlighter-rouge">.gitattributes</code> file must be created in the root of the repository and committed like any other file.</p>

<p>An example of the <code class="language-plaintext highlighter-rouge">.gitattributes</code> file content:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Set the default behavior, in case people don't have core.autocrlf set.
* text=auto

# Explicitly declare text files you want to always be normalized and converted
# to native line endings on checkout.
*.c text
*.h text

# Declare files that will always have CRLF line endings on checkout.
*.sln text eol=crlf

# Denote all files that are truly binary and should not be modified.
*.png binary
*.jpg binary
</code></pre></div></div>

<p>Reference:
<a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration">Customizing your git configuration</a></p>]]></content><author><name></name></author><category term="note-posts" /><category term="notes" /><category term="code" /><summary type="html"><![CDATA[Routine git commands]]></summary></entry><entry><title type="html">Deep Learning Model Deployment</title><link href="http://localhost:4000/blog/2023/model-deployment/" rel="alternate" type="text/html" title="Deep Learning Model Deployment" /><published>2023-06-01T09:30:00-07:00</published><updated>2023-06-01T09:30:00-07:00</updated><id>http://localhost:4000/blog/2023/model-deployment</id><content type="html" xml:base="http://localhost:4000/blog/2023/model-deployment/"><![CDATA[<h4 id="deployment-server">Deployment server</h4>
<p>Note: the order doesn’t indicate its popularity.</p>
<h5 id="1-ray">1. Ray</h5>
<p><a href="https://docs.ray.io/en/latest/ray-overview/index.html">Ray</a> is an open-source unified framework for scaling AI and Python applications like machine learning. It provides the compute layer for parallel processing so that you don’t need to be a distributed systems expert.</p>

<h5 id="2-nvidia-triton">2. Nvidia Triton</h5>
<p><a href="https://developer.nvidia.com/triton-inference-server">Nvidia Triton</a> an open-source inference serving software, standardizes AI model deployment and execution and delivers fast and scalable AI in production.</p>

<h4 id="model-conversion-or-coding-languages">Model conversion or coding languages</h4>

<h5 id="1-tensorrt">1. TensorRT</h5>
<p><a href="https://developer.nvidia.com/tensorrt">
 NVIDIA TensorRT </a> is an SDK for high-performance deep learning inference, includes a deep learning inference optimizer and runtime that delivers low latency and high throughput for inference applications.</p>

<h5 id="2-aitemplate">2. AITemplate</h5>
<p><a href="https://facebookincubator.github.io/AITemplate/index.html">AITemplate</a>(AIT) is a Python framework that transforms deep neural networks into CUDA (NVIDIA GPU) / HIP (AMD GPU) C++ code for lightning-fast inference serving.</p>

<h5 id="3-tensor-comprehensions">3. Tensor Comprehensions</h5>
<p><a href="https://facebookresearch.github.io/TensorComprehensions/">
 Tensor Comprehensions </a>(<a href="https://github.com/facebookresearch/TensorComprehensions/">TC</a>)
is a notation based on generalized Einstein notation for computing on multi-dimensional arrays. TC greatly simplifies ML framework implementations by providing a concise and powerful syntax which can be efficiently translated to high-performance computation kernels, automatically.</p>

<h5 id="4-apache-tvm">4. Apache TVM</h5>
<p><a href="https://tvm.apache.org/">Apache TVM</a> is an End to End Machine Learning Compiler Framework for CPUs, GPUs and accelerators. It aims to enable machine learning engineers to optimize and run computations efficiently on any hardware backend.</p>

<h5 id="5-openai-triton">5. OpenAI Triton</h5>
<p><a href="https://openai.com/research/triton">Triton</a> is an open-source Python-like programming language which enables researchers with no CUDA experience to write highly efficient GPU code—most of the time on par with what an expert would be able to produce.</p>

<h4 id="profiling-tools">Profiling tools:</h4>
<h5 id="1-nvidia-nsight-systems">1. NVIDIA NSight Systems</h5>
<p><a href="https://developer.nvidia.com/nsight-systems">NVIDIA Nsight™ Systems</a> is a system-wide performance analysis tool designed to visualize an application’s algorithms, help you identify the largest opportunities to optimize, and tune to scale efficiently across any quantity or size of CPUs and GPUs, from large servers to our smallest system on a chip (SoC).</p>]]></content><author><name></name></author><category term="note-posts" /><category term="notes" /><summary type="html"><![CDATA[frameworks and tools]]></summary></entry><entry><title type="html">Conda Environment configuration for Apple Silicon M1 Mac</title><link href="http://localhost:4000/blog/2023/conda-m1/" rel="alternate" type="text/html" title="Conda Environment configuration for Apple Silicon M1 Mac" /><published>2023-05-22T10:30:00-07:00</published><updated>2023-05-22T10:30:00-07:00</updated><id>http://localhost:4000/blog/2023/conda-m1</id><content type="html" xml:base="http://localhost:4000/blog/2023/conda-m1/"><![CDATA[<h4 id="python-version-management-tool--conda">Python version management tool – conda</h4>

<h5 id="1-installation">1. Installation</h5>
<p><a href="https://github.com/conda-forge/miniforge">Miniforge</a> a minimal installer for Conda specific to conda-forge.</p>

<p>Keep package imcompatibility in mind:
some package developers haven’t support ARM64 yet.</p>

<p>Short term workaround: create conda environments with x86 architecture on an Apple Silicon Mac.</p>

<h5 id="2-check-enviroment-list-may-skip">2. Check enviroment list (may skip)</h5>

<figure class="highlight"><pre><code class="language-terminal" data-lang="terminal"><span class="go">conda env list</span></code></pre></figure>

<h5 id="3-create-an-enviroment-and-activate-it">3. Create an enviroment and activate it</h5>
<p>Instead of directly creating an enviroment like the following:</p>

<figure class="highlight"><pre><code class="language-terminal" data-lang="terminal"><span class="go">conda create -n myenv python=3.9
conda activate myenv</span></code></pre></figure>

<p>Put those commands into shell function first (add this to ~/.zshrc or ~/.bashrc if you’re using Bash):</p>

<figure class="highlight"><pre><code class="language-terminal" data-lang="terminal"><span class="go">create_x86_conda_environment () {
</span><span class="gp">  #</span><span class="w"> </span>create a conda environment using x86 architecture
<span class="gp">  #</span><span class="w"> </span>first argument is environment name, all subsequent arguments will be passed to <span class="sb">`</span>conda create<span class="sb">`</span>
<span class="gp">  #</span><span class="w"> </span>example usage: create_x86_conda_environment myenv_x86 <span class="nv">python</span><span class="o">=</span>3.9
<span class="gp">  CONDA_SUBDIR=osx-64 conda create -n $</span>@
<span class="gp">  conda activate $</span>1
<span class="go">  conda config --env --set subdir osx-64
}

create_arm_conda_environment () {
</span><span class="gp">  #</span><span class="w"> </span>example usage: create_arm_conda_environment myenv_arm <span class="nv">python</span><span class="o">=</span>3.9
<span class="gp">  CONDA_SUBDIR=osx-arm64 conda create -n $</span>@
<span class="gp">  conda activate $</span>1
<span class="go">  conda config --env --set subdir osx-arm64
}</span></code></pre></figure>

<p>Then create the desired enviroment as:</p>

<figure class="highlight"><pre><code class="language-terminal" data-lang="terminal"><span class="go">create_x86_conda_environment myenv_x86 python=3.9</span></code></pre></figure>

<blockquote>
<p style="font-size:16px">One of the features of <a href="https://github.com/conda-forge/miniforge">Miniforge3</a> is the ability to define processor specific sub-directories for specific Python environments. For example, by setting CONDA_SUBDIR=osx-64, conda will be instructed to install packages from x86_64 (osx-64) specific sub-directories.

This will enable users to create an environment that installs arm64 or x86_64 (osx-64) Python packages depending on the value defined by CONDA_SUBDIR.
</p>
</blockquote>

<h5 id="4-package-management-in-an-enviroment">4. Package management in an enviroment</h5>

<figure class="highlight"><pre><code class="language-terminal" data-lang="terminal"><span class="go">conda install xxx</span></code></pre></figure>

<p>For packages that are not available through conda, you’ll need</p>

<figure class="highlight"><pre><code class="language-terminal" data-lang="terminal"><span class="go">pip install xxx</span></code></pre></figure>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/posts/python-ldap-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/posts/python-ldap-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/posts/python-ldap-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/posts/python-ldap.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

    </div>
</div>

<div class="caption">
    Figure. Example output of package installation from subdirectory osx-64.
</div>

<h4 id="references">References</h4>
<ul>
    <li><a href="https://towardsdatascience.com/how-to-manage-conda-environments-on-an-apple-silicon-m1-mac-1e29cb3bad12">How to Manage Conda Environments on an Apple Silicon M1 Mac</a>.</li>
    <li><a href="https://towardsdatascience.com/python-conda-environments-for-both-arm64-and-x86-64-on-m1-apple-silicon-147b943ffa55">Python Conda Environments for Both arm64 and x86_64 on M1 Apple Silicon</a>.</li>
</ul>]]></content><author><name></name></author><category term="note-posts" /><category term="notes" /><summary type="html"><![CDATA[Arm64 and x86 Python environments management]]></summary></entry><entry><title type="html">Stable diffusion</title><link href="http://localhost:4000/blog/2023/stable-diffusion-notes/" rel="alternate" type="text/html" title="Stable diffusion" /><published>2023-05-18T02:30:00-07:00</published><updated>2023-05-18T02:30:00-07:00</updated><id>http://localhost:4000/blog/2023/stable-diffusion-notes</id><content type="html" xml:base="http://localhost:4000/blog/2023/stable-diffusion-notes/"><![CDATA[<h4 id="stable-diffusion-explained">Stable diffusion explained</h4>

<p><a href="https://lilianweng.github.io/posts/2021-07-11-diffusion-models/">What are diffusion models</a>.</p>

<p><a href="https://yang-song.net/blog/2021/score/">
Generative Modeling by Estimating Gradients of the Data Distribution</a>.</p>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/posts/unet_architecture-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/posts/unet_architecture-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/posts/unet_architecture-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/posts/unet_architecture.jpeg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

    </div>
</div>

<div class="caption">
    Figure. UNet architecutre with residual connections.
</div>

<h4 id="stable-diffusion-practice">Stable diffusion practice</h4>
<p>The <a href="https://huggingface.co/blog/annotated-diffusion"> Annotated Diffusion Model </a>.</p>

<p>Github of <a href="https://github.com/lucidrains/denoising-diffusion-pytorch"> pytorch denoising diffusion </a> by <a href="https://github.com/lucidrains?tab=repositories">lucidrains</a>.</p>

<p>OpenAI <a href="https://github.com/openai/guided-diffusion">guided-diffusion</a>.</p>

<h4 id="references">References</h4>

<ul>
    <li>Concept of variational lower bound (also called ELBO) in <a href="https://arxiv.org/abs/1312.6114">variational auto-encoder (VAE)</a> introduced by Kingma et al., 2013.</li>
    <li><a href="https://arxiv.org/abs/1505.04597">U-Net</a> introduced by Ronneberger et al., 2015.</li>
    <li><a href="http://karpathy.github.io/2019/04/25/recipe/">A Recipe for Training Neural Networks</a></li>
</ul>]]></content><author><name></name></author><category term="note-posts" /><category term="notes" /><category term="math" /><summary type="html"><![CDATA[Stable diffusion explained]]></summary></entry><entry><title type="html">Transformer</title><link href="http://localhost:4000/blog/2023/transformer-notes/" rel="alternate" type="text/html" title="Transformer" /><published>2023-05-15T07:28:00-07:00</published><updated>2023-05-15T07:28:00-07:00</updated><id>http://localhost:4000/blog/2023/transformer-notes</id><content type="html" xml:base="http://localhost:4000/blog/2023/transformer-notes/"><![CDATA[<h4 id="transformer-explained">Transformer explained</h4>
<p>Check out the great illustration of  <a href="https://jalammar.github.io/illustrated-transformer/">transformer</a>.</p>

<h4 id="cost-formulation-background">Cost formulation background</h4>
<ul>
    <li><a href="https://colah.github.io/posts/2015-09-Visual-Information/">Entropy</a>: coding length as a system intrinsic. $$ H(p)=\sum_{x}p(x)\log_2(\frac{1}{p(x)}) $$</li>
    <li><p><a href="https://colah.github.io/posts/2015-09-Visual-Information/">Cross entropy</a>: coding length for a message (sample) p as if it is drawn from distribution q. $$H_q(p)=\sum_{x}p(x)\log_2(\frac{1}{q(x)})$$</p></li>
    <li><a href="https://www.countbayesie.com/blog/2017/5/9/kullback-leibler-divergence-explained">Lullback-Lerbler divergence</a>: coding efficiency difference based on true message (sample) distribution p (Zero-rebased cross entropy). $$D_q(p)=H_q(p) - H(p) = \sum_{x}p(x)\log_2(\frac{p(x)}{q(x)})$$</li>
</ul>

<hr />

<h4 id="transformer-practice">Transformer practice</h4>
<p>Pytorch version <a href="http://nlp.seas.harvard.edu/annotated-transformer/">The Annotated Transformer</a>.</p>

<p>Open <a href="https://colab.research.google.com/github/lin-ht/annotated-transformer/blob/master/AnnotatedTransformer.ipynb"> my forked playground in colab.</a></p>

<p>Github of <a href="https://github.com/lucidrains/x-transformers"> x-transformers </a> by <a href="https://github.com/lucidrains?tab=repositories">lucidrains</a>.</p>]]></content><author><name></name></author><category term="note-posts" /><category term="notes" /><category term="math" /><summary type="html"><![CDATA[Transformer explained]]></summary></entry></feed>